// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BalanceDeposit extends ethereum.Event {
  get params(): BalanceDeposit__Params {
    return new BalanceDeposit__Params(this);
  }
}

export class BalanceDeposit__Params {
  _event: BalanceDeposit;

  constructor(event: BalanceDeposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get balanceInc(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get currencyType(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SwapSuccess extends ethereum.Event {
  get params(): SwapSuccess__Params {
    return new SwapSuccess__Params(this);
  }
}

export class SwapSuccess__Params {
  _event: SwapSuccess;

  constructor(event: SwapSuccess) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fromAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get toAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get currencyType(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TokenDeposit extends ethereum.Event {
  get params(): TokenDeposit__Params {
    return new TokenDeposit__Params(this);
  }
}

export class TokenDeposit__Params {
  _event: TokenDeposit;

  constructor(event: TokenDeposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenInc(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get balanceDec(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get currencyType(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TokenWithdraw extends ethereum.Event {
  get params(): TokenWithdraw__Params {
    return new TokenWithdraw__Params(this);
  }
}

export class TokenWithdraw__Params {
  _event: TokenWithdraw;

  constructor(event: TokenWithdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenDec(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get balanceInc(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get currencyType(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  USDCToken(): Address {
    let result = super.call("USDCToken", "USDCToken():(address)", []);

    return result[0].toAddress();
  }

  try_USDCToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("USDCToken", "USDCToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  WETHToken(): Address {
    let result = super.call("WETHToken", "WETHToken():(address)", []);

    return result[0].toAddress();
  }

  try_WETHToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETHToken", "WETHToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFuturePrice(): BigInt {
    let result = super.call("getFuturePrice", "getFuturePrice():(int256)", []);

    return result[0].toBigInt();
  }

  try_getFuturePrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFuturePrice",
      "getFuturePrice():(int256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenPrice(
    modifyLP: boolean,
    optionPrices: Array<BigInt>,
    time: BigInt,
    _signature: Bytes
  ): BigInt {
    let result = super.call(
      "getTokenPrice",
      "getTokenPrice(bool,int256[],uint256,bytes):(int256)",
      [
        ethereum.Value.fromBoolean(modifyLP),
        ethereum.Value.fromSignedBigIntArray(optionPrices),
        ethereum.Value.fromUnsignedBigInt(time),
        ethereum.Value.fromBytes(_signature)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTokenPrice(
    modifyLP: boolean,
    optionPrices: Array<BigInt>,
    time: BigInt,
    _signature: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenPrice",
      "getTokenPrice(bool,int256[],uint256,bytes):(int256)",
      [
        ethereum.Value.fromBoolean(modifyLP),
        ethereum.Value.fromSignedBigIntArray(optionPrices),
        ethereum.Value.fromUnsignedBigInt(time),
        ethereum.Value.fromBytes(_signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  leverageLong(): Address {
    let result = super.call("leverageLong", "leverageLong():(address)", []);

    return result[0].toAddress();
  }

  try_leverageLong(): ethereum.CallResult<Address> {
    let result = super.tryCall("leverageLong", "leverageLong():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  leverageShort(): Address {
    let result = super.call("leverageShort", "leverageShort():(address)", []);

    return result[0].toAddress();
  }

  try_leverageShort(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "leverageShort",
      "leverageShort():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  liquidityPool(): Address {
    let result = super.call("liquidityPool", "liquidityPool():(address)", []);

    return result[0].toAddress();
  }

  try_liquidityPool(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidityPool",
      "liquidityPool():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  option(): Address {
    let result = super.call("option", "option():(address)", []);

    return result[0].toAddress();
  }

  try_option(): ethereum.CallResult<Address> {
    let result = super.tryCall("option", "option():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  traderBalanceUSDC(param0: Address): BigInt {
    let result = super.call(
      "traderBalanceUSDC",
      "traderBalanceUSDC(address):(int256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_traderBalanceUSDC(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "traderBalanceUSDC",
      "traderBalanceUSDC(address):(int256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  traderBalanceWETH(param0: Address): BigInt {
    let result = super.call(
      "traderBalanceWETH",
      "traderBalanceWETH(address):(int256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_traderBalanceWETH(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "traderBalanceWETH",
      "traderBalanceWETH(address):(int256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usdcDemical(): BigInt {
    let result = super.call("usdcDemical", "usdcDemical():(int256)", []);

    return result[0].toBigInt();
  }

  try_usdcDemical(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("usdcDemical", "usdcDemical():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get pool_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get short_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get long_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get option_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get usdc_(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get weth_(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get priceProvider_(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get real_(): boolean {
    return this._call.inputValues[7].value.toBoolean();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class LpDepositUSDCCall extends ethereum.Call {
  get inputs(): LpDepositUSDCCall__Inputs {
    return new LpDepositUSDCCall__Inputs(this);
  }

  get outputs(): LpDepositUSDCCall__Outputs {
    return new LpDepositUSDCCall__Outputs(this);
  }
}

export class LpDepositUSDCCall__Inputs {
  _call: LpDepositUSDCCall;

  constructor(call: LpDepositUSDCCall) {
    this._call = call;
  }

  get _usdcAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get optionPrices(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get time(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _signature(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class LpDepositUSDCCall__Outputs {
  _call: LpDepositUSDCCall;

  constructor(call: LpDepositUSDCCall) {
    this._call = call;
  }
}

export class LpDepositWETHCall extends ethereum.Call {
  get inputs(): LpDepositWETHCall__Inputs {
    return new LpDepositWETHCall__Inputs(this);
  }

  get outputs(): LpDepositWETHCall__Outputs {
    return new LpDepositWETHCall__Outputs(this);
  }
}

export class LpDepositWETHCall__Inputs {
  _call: LpDepositWETHCall;

  constructor(call: LpDepositWETHCall) {
    this._call = call;
  }

  get _wethAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get optionPrices(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get time(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _signature(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class LpDepositWETHCall__Outputs {
  _call: LpDepositWETHCall;

  constructor(call: LpDepositWETHCall) {
    this._call = call;
  }
}

export class LpWithdrawTokenCall extends ethereum.Call {
  get inputs(): LpWithdrawTokenCall__Inputs {
    return new LpWithdrawTokenCall__Inputs(this);
  }

  get outputs(): LpWithdrawTokenCall__Outputs {
    return new LpWithdrawTokenCall__Outputs(this);
  }
}

export class LpWithdrawTokenCall__Inputs {
  _call: LpWithdrawTokenCall;

  constructor(call: LpWithdrawTokenCall) {
    this._call = call;
  }

  get _tokenNum(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get currencyType(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get optionPrices(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get time(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _signature(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class LpWithdrawTokenCall__Outputs {
  _call: LpWithdrawTokenCall;

  constructor(call: LpWithdrawTokenCall) {
    this._call = call;
  }
}

export class TraderBuyOptionCall extends ethereum.Call {
  get inputs(): TraderBuyOptionCall__Inputs {
    return new TraderBuyOptionCall__Inputs(this);
  }

  get outputs(): TraderBuyOptionCall__Outputs {
    return new TraderBuyOptionCall__Outputs(this);
  }
}

export class TraderBuyOptionCall__Inputs {
  _call: TraderBuyOptionCall;

  constructor(call: TraderBuyOptionCall) {
    this._call = call;
  }

  get currencyType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get epochId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get productId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get buySize(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get buyPrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get futurePrice(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get buyPriceGenerateTime(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _signature(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class TraderBuyOptionCall__Outputs {
  _call: TraderBuyOptionCall;

  constructor(call: TraderBuyOptionCall) {
    this._call = call;
  }
}

export class TraderChangeLongOrderMarginCall extends ethereum.Call {
  get inputs(): TraderChangeLongOrderMarginCall__Inputs {
    return new TraderChangeLongOrderMarginCall__Inputs(this);
  }

  get outputs(): TraderChangeLongOrderMarginCall__Outputs {
    return new TraderChangeLongOrderMarginCall__Outputs(this);
  }
}

export class TraderChangeLongOrderMarginCall__Inputs {
  _call: TraderChangeLongOrderMarginCall;

  constructor(call: TraderChangeLongOrderMarginCall) {
    this._call = call;
  }

  get wethMarginAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class TraderChangeLongOrderMarginCall__Outputs {
  _call: TraderChangeLongOrderMarginCall;

  constructor(call: TraderChangeLongOrderMarginCall) {
    this._call = call;
  }
}

export class TraderChangeShortOrderMarginCall extends ethereum.Call {
  get inputs(): TraderChangeShortOrderMarginCall__Inputs {
    return new TraderChangeShortOrderMarginCall__Inputs(this);
  }

  get outputs(): TraderChangeShortOrderMarginCall__Outputs {
    return new TraderChangeShortOrderMarginCall__Outputs(this);
  }
}

export class TraderChangeShortOrderMarginCall__Inputs {
  _call: TraderChangeShortOrderMarginCall;

  constructor(call: TraderChangeShortOrderMarginCall) {
    this._call = call;
  }

  get usdcMarginAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class TraderChangeShortOrderMarginCall__Outputs {
  _call: TraderChangeShortOrderMarginCall;

  constructor(call: TraderChangeShortOrderMarginCall) {
    this._call = call;
  }
}

export class TraderClaimProfitCall extends ethereum.Call {
  get inputs(): TraderClaimProfitCall__Inputs {
    return new TraderClaimProfitCall__Inputs(this);
  }

  get outputs(): TraderClaimProfitCall__Outputs {
    return new TraderClaimProfitCall__Outputs(this);
  }
}

export class TraderClaimProfitCall__Inputs {
  _call: TraderClaimProfitCall;

  constructor(call: TraderClaimProfitCall) {
    this._call = call;
  }

  get currencyType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get epochIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get productIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class TraderClaimProfitCall__Outputs {
  _call: TraderClaimProfitCall;

  constructor(call: TraderClaimProfitCall) {
    this._call = call;
  }
}

export class TraderCloseLongOrderCall extends ethereum.Call {
  get inputs(): TraderCloseLongOrderCall__Inputs {
    return new TraderCloseLongOrderCall__Inputs(this);
  }

  get outputs(): TraderCloseLongOrderCall__Outputs {
    return new TraderCloseLongOrderCall__Outputs(this);
  }
}

export class TraderCloseLongOrderCall__Inputs {
  _call: TraderCloseLongOrderCall;

  constructor(call: TraderCloseLongOrderCall) {
    this._call = call;
  }

  get currencyType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get closeTokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TraderCloseLongOrderCall__Outputs {
  _call: TraderCloseLongOrderCall;

  constructor(call: TraderCloseLongOrderCall) {
    this._call = call;
  }
}

export class TraderCloseShortOrderCall extends ethereum.Call {
  get inputs(): TraderCloseShortOrderCall__Inputs {
    return new TraderCloseShortOrderCall__Inputs(this);
  }

  get outputs(): TraderCloseShortOrderCall__Outputs {
    return new TraderCloseShortOrderCall__Outputs(this);
  }
}

export class TraderCloseShortOrderCall__Inputs {
  _call: TraderCloseShortOrderCall;

  constructor(call: TraderCloseShortOrderCall) {
    this._call = call;
  }

  get currencyType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get closeTokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TraderCloseShortOrderCall__Outputs {
  _call: TraderCloseShortOrderCall;

  constructor(call: TraderCloseShortOrderCall) {
    this._call = call;
  }
}

export class TraderDepositUSDCCall extends ethereum.Call {
  get inputs(): TraderDepositUSDCCall__Inputs {
    return new TraderDepositUSDCCall__Inputs(this);
  }

  get outputs(): TraderDepositUSDCCall__Outputs {
    return new TraderDepositUSDCCall__Outputs(this);
  }
}

export class TraderDepositUSDCCall__Inputs {
  _call: TraderDepositUSDCCall;

  constructor(call: TraderDepositUSDCCall) {
    this._call = call;
  }

  get usdcAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class TraderDepositUSDCCall__Outputs {
  _call: TraderDepositUSDCCall;

  constructor(call: TraderDepositUSDCCall) {
    this._call = call;
  }
}

export class TraderDepositWETHCall extends ethereum.Call {
  get inputs(): TraderDepositWETHCall__Inputs {
    return new TraderDepositWETHCall__Inputs(this);
  }

  get outputs(): TraderDepositWETHCall__Outputs {
    return new TraderDepositWETHCall__Outputs(this);
  }
}

export class TraderDepositWETHCall__Inputs {
  _call: TraderDepositWETHCall;

  constructor(call: TraderDepositWETHCall) {
    this._call = call;
  }

  get wethAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class TraderDepositWETHCall__Outputs {
  _call: TraderDepositWETHCall;

  constructor(call: TraderDepositWETHCall) {
    this._call = call;
  }
}

export class TraderOpenLongOrderCall extends ethereum.Call {
  get inputs(): TraderOpenLongOrderCall__Inputs {
    return new TraderOpenLongOrderCall__Inputs(this);
  }

  get outputs(): TraderOpenLongOrderCall__Outputs {
    return new TraderOpenLongOrderCall__Outputs(this);
  }
}

export class TraderOpenLongOrderCall__Inputs {
  _call: TraderOpenLongOrderCall;

  constructor(call: TraderOpenLongOrderCall) {
    this._call = call;
  }

  get currencyType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get marginAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get leverage(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TraderOpenLongOrderCall__Outputs {
  _call: TraderOpenLongOrderCall;

  constructor(call: TraderOpenLongOrderCall) {
    this._call = call;
  }
}

export class TraderOpenShortOrderCall extends ethereum.Call {
  get inputs(): TraderOpenShortOrderCall__Inputs {
    return new TraderOpenShortOrderCall__Inputs(this);
  }

  get outputs(): TraderOpenShortOrderCall__Outputs {
    return new TraderOpenShortOrderCall__Outputs(this);
  }
}

export class TraderOpenShortOrderCall__Inputs {
  _call: TraderOpenShortOrderCall;

  constructor(call: TraderOpenShortOrderCall) {
    this._call = call;
  }

  get currencyType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get marginAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get leverage(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TraderOpenShortOrderCall__Outputs {
  _call: TraderOpenShortOrderCall;

  constructor(call: TraderOpenShortOrderCall) {
    this._call = call;
  }
}

export class TraderUSDCSwapWETHCall extends ethereum.Call {
  get inputs(): TraderUSDCSwapWETHCall__Inputs {
    return new TraderUSDCSwapWETHCall__Inputs(this);
  }

  get outputs(): TraderUSDCSwapWETHCall__Outputs {
    return new TraderUSDCSwapWETHCall__Outputs(this);
  }
}

export class TraderUSDCSwapWETHCall__Inputs {
  _call: TraderUSDCSwapWETHCall;

  constructor(call: TraderUSDCSwapWETHCall) {
    this._call = call;
  }

  get usdcAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class TraderUSDCSwapWETHCall__Outputs {
  _call: TraderUSDCSwapWETHCall;

  constructor(call: TraderUSDCSwapWETHCall) {
    this._call = call;
  }
}

export class TraderWETHSwapUSDCCall extends ethereum.Call {
  get inputs(): TraderWETHSwapUSDCCall__Inputs {
    return new TraderWETHSwapUSDCCall__Inputs(this);
  }

  get outputs(): TraderWETHSwapUSDCCall__Outputs {
    return new TraderWETHSwapUSDCCall__Outputs(this);
  }
}

export class TraderWETHSwapUSDCCall__Inputs {
  _call: TraderWETHSwapUSDCCall;

  constructor(call: TraderWETHSwapUSDCCall) {
    this._call = call;
  }

  get wethAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class TraderWETHSwapUSDCCall__Outputs {
  _call: TraderWETHSwapUSDCCall;

  constructor(call: TraderWETHSwapUSDCCall) {
    this._call = call;
  }
}

export class TraderWithdrawUSDCCall extends ethereum.Call {
  get inputs(): TraderWithdrawUSDCCall__Inputs {
    return new TraderWithdrawUSDCCall__Inputs(this);
  }

  get outputs(): TraderWithdrawUSDCCall__Outputs {
    return new TraderWithdrawUSDCCall__Outputs(this);
  }
}

export class TraderWithdrawUSDCCall__Inputs {
  _call: TraderWithdrawUSDCCall;

  constructor(call: TraderWithdrawUSDCCall) {
    this._call = call;
  }

  get usdcAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class TraderWithdrawUSDCCall__Outputs {
  _call: TraderWithdrawUSDCCall;

  constructor(call: TraderWithdrawUSDCCall) {
    this._call = call;
  }
}

export class TraderWithdrawWETHCall extends ethereum.Call {
  get inputs(): TraderWithdrawWETHCall__Inputs {
    return new TraderWithdrawWETHCall__Inputs(this);
  }

  get outputs(): TraderWithdrawWETHCall__Outputs {
    return new TraderWithdrawWETHCall__Outputs(this);
  }
}

export class TraderWithdrawWETHCall__Inputs {
  _call: TraderWithdrawWETHCall;

  constructor(call: TraderWithdrawWETHCall) {
    this._call = call;
  }

  get wethAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class TraderWithdrawWETHCall__Outputs {
  _call: TraderWithdrawWETHCall;

  constructor(call: TraderWithdrawWETHCall) {
    this._call = call;
  }
}
